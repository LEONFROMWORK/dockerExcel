#!/bin/bash

# Excel Unified 개선된 통합 시스템 실행 스크립트
# 병렬 처리와 향상된 에러 처리로 빠른 시작

set -e  # Exit on any error

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# 로그 함수들
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_header() {
    echo -e "${BOLD}${CYAN}🚀 $1${NC}"
}

# 진행 표시기
show_progress() {
    local task=$1
    local current=$2
    local total=$3
    local percent=$((current * 100 / total))
    printf "\r${BLUE}[%-50s] %d%% - %s${NC}" "$(printf '#%.0s' $(seq 1 $((percent/2))))" "$percent" "$task"
    if [ "$current" -eq "$total" ]; then
        echo ""
    fi
}

# 파라미터 파싱
ONLY_SERVICE=""
OPEN_BROWSER=true
VERBOSE=false
PARALLEL=true
SKIP_CHECKS=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --only)
            ONLY_SERVICE="$2"
            shift 2
            ;;
        --no-browser)
            OPEN_BROWSER=false
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --no-parallel)
            PARALLEL=false
            shift
            ;;
        --skip-checks)
            SKIP_CHECKS=true
            shift
            ;;
        --help)
            echo "사용법: ./start-all-improved [옵션]"
            echo "옵션:"
            echo "  --only [rails|python|collabora|docker]  특정 서비스만 실행"
            echo "  --no-browser                             브라우저 자동 실행 안함"
            echo "  --verbose                                자세한 로그 출력"
            echo "  --no-parallel                            순차적 실행 (디버깅용)"
            echo "  --skip-checks                            서비스 검증 건너뛰기"
            echo "  --help                                   도움말 표시"
            exit 0
            ;;
        *)
            log_error "알 수 없는 옵션: $1"
            exit 1
            ;;
    esac
done

# 시작 시간 기록
START_TIME=$(date +%s)

# PID 저장용 배열
declare -a SERVICE_PIDS

# 프로세스 정리 함수
cleanup_processes() {
    log_info "기존 프로세스 정리 중..."

    # tmux 세션 종료
    tmux kill-session -t excel-unified 2>/dev/null || true

    # 프로세스 종료 목록
    local processes=(
        "rails server"
        "puma"
        "vite"
        "node.*vite"
        "uvicorn"
        "python.*main:app"
        "sidekiq"
        "tailwindcss"
    )

    for proc in "${processes[@]}"; do
        pkill -f "$proc" 2>/dev/null || true
    done

    # 포트가 해제될 때까지 대기
    sleep 2

    # 포트 강제 해제
    for port in 3000 8000 5173; do
        if lsof -ti:$port > /dev/null 2>&1; then
            kill -9 $(lsof -ti:$port) 2>/dev/null || true
        fi
    done

    log_success "기존 프로세스 정리 완료"
}

# 서비스 상태 확인 함수
check_service_health() {
    local service=$1
    local url=$2
    local max_attempts=${3:-30}
    local wait_time=${4:-2}

    for i in $(seq 1 $max_attempts); do
        if curl -s "$url" > /dev/null 2>&1; then
            return 0
        fi
        sleep $wait_time
        if [[ $((i % 5)) -eq 0 ]] && [[ "$VERBOSE" == true ]]; then
            log_info "$service 대기 중... ($i/$max_attempts)"
        fi
    done
    return 1
}

# PostgreSQL 시작 함수
ensure_postgresql() {
    if [[ "$SKIP_CHECKS" == true ]]; then
        return 0
    fi

    log_info "PostgreSQL 상태 확인 중..."
    if ! pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
        log_warning "PostgreSQL이 실행되지 않았습니다."
        if command -v brew &> /dev/null; then
            brew services start postgresql@14 2>/dev/null || brew services start postgresql 2>/dev/null || true
            sleep 3
        fi

        if ! pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
            log_error "PostgreSQL을 시작할 수 없습니다."
            return 1
        fi
    fi
    log_success "PostgreSQL 실행 중"
    return 0
}

# Redis 시작 함수
ensure_redis() {
    if [[ "$SKIP_CHECKS" == true ]]; then
        return 0
    fi

    log_info "Redis 상태 확인 중..."
    if ! redis-cli ping > /dev/null 2>&1; then
        log_warning "Redis가 실행되지 않았습니다."
        if command -v brew &> /dev/null; then
            brew services start redis 2>/dev/null || true
            sleep 2
        fi

        if ! redis-cli ping > /dev/null 2>&1; then
            log_error "Redis를 시작할 수 없습니다."
            return 1
        fi
    fi
    log_success "Redis 실행 중"
    return 0
}

# Docker Collabora 시작 함수
start_collabora_docker() {
    log_info "Collabora Online Docker 확인 중..."

    # Docker daemon 확인
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker가 실행되지 않고 있습니다."
        return 1
    fi

    # 기존 컨테이너 확인
    local existing_container=$(docker ps -a --filter "name=collabora" --format "{{.Names}}" | head -1)

    if [[ -n "$existing_container" ]]; then
        local status=$(docker inspect --format="{{.State.Status}}" "$existing_container" 2>/dev/null || echo "unknown")

        if [[ "$status" == "running" ]]; then
            log_success "Collabora Docker 이미 실행 중: $existing_container"
            return 0
        else
            log_info "기존 Collabora 컨테이너 시작 중..."
            docker start "$existing_container" > /dev/null 2>&1
            sleep 3
        fi
    else
        log_info "새 Collabora 컨테이너 실행 중..."
        docker run -d \
            --name collabora-unified \
            -p 9980:9980 \
            -e "aliasgroup1=http://host.docker.internal:3000" \
            -e "extra_params=--o:ssl.enable=false --o:ssl.termination=true --o:net.proto=IPv4" \
            -e "DONT_GEN_SSL_CERT=1" \
            --add-host host.docker.internal:host-gateway \
            collabora/code:23.05.4.2.1 > /dev/null 2>&1
    fi

    if check_service_health "Collabora" "http://localhost:9980/hosting/discovery" 20 2; then
        log_success "Collabora Online 실행됨 (포트 9980)"
        return 0
    else
        log_error "Collabora Online 시작 실패"
        return 1
    fi
}

# Rails 시작 함수
start_rails() {
    log_info "Rails 서버 시작 중... (포트 3000)"

    # tmux 세션 생성
    tmux new-session -d -s excel-unified -n rails

    # Rails 환경 설정 및 실행
    tmux send-keys -t excel-unified:rails "cd /Users/kevin/excel-unified/rails-app" C-m
    tmux send-keys -t excel-unified:rails "export RAILS_ENV=development" C-m
    tmux send-keys -t excel-unified:rails "export RAILS_MAX_THREADS=5" C-m
    tmux send-keys -t excel-unified:rails "rm -f tmp/pids/server.pid" C-m
    tmux send-keys -t excel-unified:rails "bin/dev" C-m

    # Rails 시작 확인
    if check_service_health "Rails" "http://localhost:3000/up" 30 2; then
        log_success "Rails 서버 실행됨 (포트 3000)"

        # Sidekiq 시작 (Rails 시작 후)
        tmux new-window -t excel-unified -n sidekiq
        tmux send-keys -t excel-unified:sidekiq "cd /Users/kevin/excel-unified/rails-app && bundle exec sidekiq" C-m
        log_success "Sidekiq 백그라운드 작업 시작됨"

        return 0
    else
        log_error "Rails 서버 시작 실패"
        return 1
    fi
}

# Python 시작 함수
start_python() {
    log_info "Python 서비스 시작 중... (포트 8000)"

    # 포트 확인 및 정리
    if lsof -ti:8000 > /dev/null 2>&1; then
        kill -9 $(lsof -ti:8000) 2>/dev/null || true
        sleep 1
    fi

    # Python 서비스 시작
    tmux new-window -t excel-unified -n python
    tmux send-keys -t excel-unified:python "cd /Users/kevin/excel-unified/python-service" C-m
    tmux send-keys -t excel-unified:python "source venv/bin/activate" C-m
    tmux send-keys -t excel-unified:python "export PYTHONPATH=/Users/kevin/excel-unified/python-service" C-m
    tmux send-keys -t excel-unified:python "uvicorn main:app --reload --host 0.0.0.0 --port 8000" C-m

    # Python 서비스 확인
    if check_service_health "Python" "http://localhost:8000/health" 45 2; then
        log_success "Python 서비스 실행됨 (포트 8000)"
        return 0
    else
        log_error "Python 서비스 시작 실패"
        # 로그 확인 명령 제공
        log_error "다음 명령으로 로그를 확인하세요: tmux attach -t excel-unified:python"
        return 1
    fi
}

# 병렬 서비스 시작 함수
start_services_parallel() {
    log_header "서비스 병렬 시작"

    local pids=()
    local services=()

    # Rails 시작
    (start_rails) &
    pids+=($!)
    services+=("Rails")

    # Python 시작 (Rails와 동시에)
    (start_python) &
    pids+=($!)
    services+=("Python")

    # Collabora 시작 (독립적)
    (start_collabora_docker) &
    pids+=($!)
    services+=("Collabora")

    # 모든 프로세스 대기
    local failed=false
    for i in "${!pids[@]}"; do
        if ! wait "${pids[$i]}"; then
            log_error "${services[$i]} 시작 실패"
            failed=true
        fi
    done

    if [[ "$failed" == true ]]; then
        return 1
    fi

    return 0
}

# 서비스 상태 표시 함수
show_service_status() {
    log_header "서비스 상태"

    local services=(
        "Rails|http://localhost:3000/up|3000"
        "Python|http://localhost:8000/health|8000"
        "Collabora|http://localhost:9980/hosting/discovery|9980"
        "PostgreSQL|pg_isready|5432"
        "Redis|redis-cli ping|6379"
    )

    for service_info in "${services[@]}"; do
        IFS='|' read -r name check port <<< "$service_info"

        if [[ "$name" == "PostgreSQL" ]]; then
            if pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
                echo -e "${GREEN}✅ $name (포트 $port)${NC}"
            else
                echo -e "${RED}❌ $name (포트 $port)${NC}"
            fi
        elif [[ "$name" == "Redis" ]]; then
            if redis-cli ping > /dev/null 2>&1; then
                echo -e "${GREEN}✅ $name (포트 $port)${NC}"
            else
                echo -e "${RED}❌ $name (포트 $port)${NC}"
            fi
        else
            if curl -s "$check" > /dev/null 2>&1; then
                echo -e "${GREEN}✅ $name (포트 $port)${NC}"
            else
                echo -e "${RED}❌ $name (포트 $port)${NC}"
            fi
        fi
    done
}

# 메인 실행 함수
main() {
    log_header "Excel Unified 통합 시스템 시작"
    echo ""

    # 1. 기존 프로세스 정리
    if [[ -z "$ONLY_SERVICE" || "$ONLY_SERVICE" == "all" ]]; then
        cleanup_processes
    fi

    # 2. 필수 서비스 확인
    if [[ -z "$ONLY_SERVICE" || "$ONLY_SERVICE" == "all" ]]; then
        log_header "필수 서비스 확인"
        ensure_postgresql || exit 1
        ensure_redis || exit 1
    fi

    # 3. 서비스 시작
    case "$ONLY_SERVICE" in
        "rails")
            start_rails || exit 1
            ;;
        "python")
            start_python || exit 1
            ;;
        "collabora"|"docker")
            start_collabora_docker || exit 1
            ;;
        *)
            if [[ "$PARALLEL" == true ]]; then
                start_services_parallel || exit 1
            else
                log_header "Docker 서비스 시작"
                start_collabora_docker || log_warning "Collabora 시작 실패 (계속 진행)"

                log_header "애플리케이션 서비스 시작"
                start_rails || exit 1
                start_python || exit 1
            fi
            ;;
    esac

    # 4. 완료 메시지
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))

    echo ""
    log_header "🎉 Excel Unified 시스템 시작 완료! (${DURATION}초)"
    echo ""

    # 5. 서비스 상태 표시
    show_service_status

    echo ""
    log_info "서비스 URL:"
    echo -e "  ${CYAN}📍 메인 애플리케이션: ${BOLD}http://localhost:3000${NC}"
    echo -e "  ${CYAN}📍 Excel AI: ${BOLD}http://localhost:3000/ai/excel${NC}"
    echo -e "  ${CYAN}📍 Python API 문서: ${BOLD}http://localhost:8000/docs${NC}"
    echo ""

    log_info "유용한 명령어:"
    echo -e "  ${YELLOW}tmux attach -t excel-unified${NC}         # 서비스 로그 확인"
    echo -e "  ${YELLOW}tmux list-windows -t excel-unified${NC}   # 실행 중인 서비스 목록"
    echo -e "  ${YELLOW}./stop-all${NC}                          # 모든 서비스 종료"
    echo ""

    # 6. 브라우저 열기
    if [[ "$OPEN_BROWSER" == true && -z "$ONLY_SERVICE" ]]; then
        sleep 2  # 서비스가 완전히 준비될 때까지 대기
        log_info "브라우저에서 애플리케이션 열기..."
        if command -v open &> /dev/null; then
            open "http://localhost:3000/ai/excel"
        elif command -v xdg-open &> /dev/null; then
            xdg-open "http://localhost:3000/ai/excel"
        fi
    fi
}

# 스크립트 실행
main "$@"

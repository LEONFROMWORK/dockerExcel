name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  RAILS_ENV: test
  NODE_ENV: test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/excel_unified_test

jobs:
  ruby-tests:
    name: Ruby Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: excel_unified_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true
          working-directory: rails-app
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: rails-app/package-lock.json
      
      - name: Install dependencies
        working-directory: rails-app
        run: |
          bundle install
          npm ci
      
      - name: Setup database
        working-directory: rails-app
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:enable_pgvector || true
      
      - name: Run Ruby tests
        working-directory: rails-app
        run: |
          bundle exec rspec --format progress --format RspecJunitFormatter --out rspec.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ruby-test-results
          path: rails-app/rspec.xml
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ruby-coverage
          path: rails-app/coverage

  javascript-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: rails-app/package-lock.json
      
      - name: Install dependencies
        working-directory: rails-app
        run: npm ci
      
      - name: Run JavaScript tests
        working-directory: rails-app
        run: npm test -- --run --coverage
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: javascript-coverage
          path: rails-app/coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [ruby-tests, javascript-tests]
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: excel_unified_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true
          working-directory: rails-app
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: rails-app/package-lock.json
      
      - name: Install dependencies
        working-directory: rails-app
        run: |
          bundle install
          npm ci
      
      - name: Setup database
        working-directory: rails-app
        run: |
          bundle exec rails db:create
          bundle exec rails db:schema:load
          bundle exec rails db:seed
      
      - name: Build assets
        working-directory: rails-app
        run: |
          npm run build
          bundle exec rails assets:precompile
      
      - name: Start Rails server
        working-directory: rails-app
        run: |
          bundle exec rails server -p 3000 -d
          sleep 10
      
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: rails-app
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: rails-app/cypress/screenshots
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos
          path: rails-app/cypress/videos

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.0'
          bundler-cache: true
          working-directory: rails-app
      
      - name: Run Brakeman
        working-directory: rails-app
        run: |
          gem install brakeman
          brakeman -q -f json -o brakeman-report.json
      
      - name: Upload Brakeman report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: brakeman-report
          path: rails-app/brakeman-report.json
      
      - name: Run bundle audit
        working-directory: rails-app
        run: |
          gem install bundler-audit
          bundle audit check --update
      
      - name: Run npm audit
        working-directory: rails-app
        run: npm audit --production

  python-tests:
    name: Python Service Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: excel_unified_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: python-service/requirements.txt
      
      - name: Install dependencies
        working-directory: python-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run Python tests
        working-directory: python-service
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/excel_unified_test
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html
      
      - name: Upload Python coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-coverage
          path: python-service/htmlcov

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [ruby-tests, javascript-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        run: |
          k6 run --out json=k6-results.json k6/scripts/load-test.js
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: k6-results.json

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [ruby-tests, javascript-tests, e2e-tests, security-scan, python-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add test status
          echo "### Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Ruby Tests: ${{ needs.ruby-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- JavaScript Tests: ${{ needs.javascript-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Tests: ${{ needs.python-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test results and coverage reports have been uploaded as artifacts" >> $GITHUB_STEP_SUMMARY
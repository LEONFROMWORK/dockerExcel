# Nginx Production Configuration for Excel Unified
# 고성능 및 보안을 위한 최적화된 설정

# Worker 프로세스 설정
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

# 에러 로그 설정
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 이벤트 블록 - 성능 최적화
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # MIME 타입 설정
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 로그 포맷 정의
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format json escape=json '{'
                   '"time":"$time_iso8601",'
                   '"remote_addr":"$remote_addr",'
                   '"request":"$request",'
                   '"status":$status,'
                   '"body_bytes_sent":$body_bytes_sent,'
                   '"request_time":$request_time,'
                   '"upstream_response_time":"$upstream_response_time"'
                   '}';

    # 기본 설정
    access_log /var/log/nginx/access.log main;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    reset_timedout_connection on;

    # 클라이언트 설정
    client_max_body_size 50M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1m;
    large_client_header_buffers 4 4k;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # Gzip 압축 설정 (향상된 성능)
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        application/rdf+xml
        application/manifest+json
        application/vnd.ms-excel
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
        image/svg+xml;

    # Brotli 압축 (사용 가능한 경우)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css application/javascript application/json image/svg+xml;

    # 캐시 설정
    open_file_cache max=10000 inactive=5m;
    open_file_cache_valid 2m;
    open_file_cache_min_uses 1;
    open_file_cache_errors on;

    # Rate Limiting (향상된 제한)
    limit_req_zone $binary_remote_addr zone=api:10m rate=60r/m;
    limit_req_zone $binary_remote_addr zone=assets:10m rate=200r/m;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=health:10m rate=300r/m;

    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Upstream 설정
    upstream rails_backend {
        server rails:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    upstream python_backend {
        server python:8000 max_fails=3 fail_timeout=30s;
        keepalive 16;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # 보안 헤더 설정
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;

    # HTTPS가 설정된 경우 HSTS 적용
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # 추가 보안 헤더
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'" always;

    # 메인 서버 설정
    server {
        listen 80;
        server_name localhost _;
        root /rails/public;
        index index.html;

        # Connection limiting
        limit_conn addr 10;

        # 보안 헤더
        add_header X-Request-ID $request_id always;

        # robots.txt (프로덕션에서 필요시 수정)
        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }

        # favicon.ico
        location = /favicon.ico {
            log_not_found off;
            access_log off;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 정적 자산 - 장기 캐싱
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Rate limiting for assets (향상된 제한)
            limit_req zone=assets burst=100 nodelay;
            
            # 정적 파일이 없으면 Rails로 전달
            try_files $uri @rails;
        }

        # Vite 개발 서버 자산 (HMR)
        location /@vite/ {
            proxy_pass http://rails_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        # Vite 빌드된 자산
        location /vite/assets/ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }

        # Health check 엔드포인트 (전용 rate limit)
        location /health {
            limit_req zone=health burst=100 nodelay;
            access_log off;
            proxy_pass http://rails_backend/api/v1/health;
            proxy_set_header Host $host;
            proxy_connect_timeout 3s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            proxy_cache_bypass 1;
            proxy_no_cache 1;
        }

        # API 엔드포인트 - Rate limiting 적용
        location /api/ {
            # Rate limiting (향상된 제한)
            limit_req zone=api burst=120 nodelay;
            
            # 파일 업로드 API는 별도 제한 (향상된 제한)
            location /api/v1/files {
                limit_req zone=upload burst=10 nodelay;
                proxy_pass http://rails_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Request-ID $request_id;
                
                # 큰 파일 업로드를 위한 설정
                client_max_body_size 100M;
                proxy_connect_timeout 60s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;
            }

            # Python 서비스 API
            location /api/v1/python/ {
                proxy_pass http://python_backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Request-ID $request_id;
                
                # AI 처리를 위한 긴 타임아웃
                proxy_connect_timeout 10s;
                proxy_send_timeout 300s;
                proxy_read_timeout 300s;
            }

            # 일반 Rails API
            proxy_pass http://rails_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 기본 타임아웃
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 루트 및 기타 모든 요청을 Rails로 전달
        location / {
            try_files $uri $uri/index.html @rails;
        }

        location @rails {
            proxy_pass http://rails_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 타임아웃 설정
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # 에러 페이지 설정
        error_page 404 /404.html;
        error_page 500 502 503 504 /500.html;

        location = /404.html {
            root /rails/public;
            internal;
        }

        location = /500.html {
            root /rails/public;
            internal;
        }
    }

    # HTTPS 설정 (SSL 인증서가 있는 경우)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #     
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     
    #     # SSL 설정
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers off;
    #     ssl_session_cache shared:SSL:10m;
    #     ssl_session_timeout 5m;
    #     
    #     # OCSP Stapling
    #     ssl_stapling on;
    #     ssl_stapling_verify on;
    #     
    #     # 위의 server 블록과 동일한 location 설정
    #     # ...
    # }

    # HTTP to HTTPS 리다이렉션 (HTTPS 사용 시)
    # server {
    #     listen 80;
    #     server_name your-domain.com;
    #     return 301 https://$server_name$request_uri;
    # }
}
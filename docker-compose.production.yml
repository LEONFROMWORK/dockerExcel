version: '3.8'

services:
  # FastAPI Python Service
  fastapi:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    container_name: excel-unified-fastapi
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://excel_user:${DB_PASSWORD}@postgres:5432/excel_unified
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./python-service/uploads:/app/uploads
      - ./python-service/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - excel-network

  # Rails Application
  rails:
    build:
      context: ./rails-app
      dockerfile: Dockerfile
    container_name: excel-unified-rails
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://excel_user:${DB_PASSWORD}@postgres:5432/excel_unified
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - RAILS_LOG_TO_STDOUT=true
      - PYTHON_SERVICE_URL=http://fastapi:8000
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
      - fastapi
    volumes:
      - ./rails-app/storage:/rails/storage
      - ./rails-app/log:/rails/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - excel-network

  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: excel-unified-postgres
    environment:
      - POSTGRES_USER=excel_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=excel_unified
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U excel_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - excel-network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: excel-unified-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - excel-network

  # Sidekiq (Background Jobs)
  sidekiq:
    build:
      context: ./rails-app
      dockerfile: Dockerfile
    container_name: excel-unified-sidekiq
    command: bundle exec sidekiq
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://excel_user:${DB_PASSWORD}@postgres:5432/excel_unified
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./rails-app/storage:/rails/storage
    restart: unless-stopped
    networks:
      - excel-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: excel-unified-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - rails
      - fastapi
    restart: unless-stopped
    networks:
      - excel-network

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: excel-unified-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - excel-network

  # Grafana (Metrics Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: excel-unified-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - excel-network

  # Elasticsearch (Logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: excel-unified-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - excel-network

  # Kibana (Log Visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: excel-unified-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - excel-network

  # Filebeat (Log Shipper)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: excel-unified-filebeat
    user: root
    volumes:
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./python-service/logs:/logs/python:ro
      - ./rails-app/log:/logs/rails:ro
      - nginx_logs:/logs/nginx:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - excel-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  nginx_logs:

networks:
  excel-network:
    driver: bridge
#!/bin/bash

# Excel Unified Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú ÏõêÌÅ¥Î¶≠ Ïã§Ìñâ Ïä§ÌÅ¨Î¶ΩÌä∏
# Î™®Îì† ÏÑúÎ≤ÑÏôÄ Docker ÏÑúÎπÑÏä§Î•º Ìïú Î≤àÏóê ÏãúÏûë

set -e  # Exit on any error

# ÏÉâÏÉÅ Ï†ïÏùò
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Î°úÍ∑∏ Ìï®ÏàòÎì§
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo -e "${BOLD}${CYAN}üöÄ $1${NC}"
}

# ÌååÎùºÎØ∏ÌÑ∞ ÌååÏã±
ONLY_SERVICE=""
OPEN_BROWSER=true
VERBOSE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --only)
            ONLY_SERVICE="$2"
            shift 2
            ;;
        --no-browser)
            OPEN_BROWSER=false
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            echo "ÏÇ¨Ïö©Î≤ï: ./start-all [ÏòµÏÖò]"
            echo "ÏòµÏÖò:"
            echo "  --only [rails|python|collabora|docker]  ÌäπÏ†ï ÏÑúÎπÑÏä§Îßå Ïã§Ìñâ"
            echo "  --no-browser                             Î∏åÎùºÏö∞Ï†Ä ÏûêÎèô Ïã§Ìñâ ÏïàÌï®"
            echo "  --verbose                                ÏûêÏÑ∏Ìïú Î°úÍ∑∏ Ï∂úÎ†•"
            echo "  --help                                   ÎèÑÏõÄÎßê ÌëúÏãú"
            exit 0
            ;;
        *)
            log_error "Ïïå Ïàò ÏóÜÎäî ÏòµÏÖò: $1"
            exit 1
            ;;
    esac
done

# ÏãúÏûë ÏãúÍ∞Ñ Í∏∞Î°ù
START_TIME=$(date +%s)

log_header "Excel Unified ÌÜµÌï© ÏãúÏä§ÌÖú ÏãúÏûë"
echo ""

# 1. Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨
if [[ -z "$ONLY_SERVICE" || "$ONLY_SERVICE" == "all" ]]; then
    log_info "Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨ Ï§ë..."

    # Rails ÏÑúÎ≤Ñ Ï¢ÖÎ£å
    pkill -f "rails server" 2>/dev/null || true
    pkill -f "puma" 2>/dev/null || true

    # Vite Í∞úÎ∞ú ÏÑúÎ≤Ñ Ï¢ÖÎ£å
    pkill -f "vite" 2>/dev/null || true
    pkill -f "node.*vite" 2>/dev/null || true

    # Python ÏÑúÎπÑÏä§ Ï¢ÖÎ£å
    pkill -f "uvicorn" 2>/dev/null || true
    pkill -f "python.*main:app" 2>/dev/null || true

    # Sidekiq Ï¢ÖÎ£å
    pkill -f "sidekiq" 2>/dev/null || true

    # tmux ÏÑ∏ÏÖò Ï¢ÖÎ£å
    tmux kill-session -t excel-unified 2>/dev/null || true

    sleep 2
    log_success "Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ¶¨ ÏôÑÎ£å"
fi

# 2. ÌïÑÏàò ÏÑúÎπÑÏä§ ÌôïÏù∏ Ìï®Ïàò
check_postgresql() {
    log_info "PostgreSQL ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."
    if pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
        log_success "PostgreSQL Ïã§Ìñâ Ï§ë"
        return 0
    else
        log_warning "PostgreSQLÏù¥ Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
        log_info "PostgreSQL ÏãúÏûë ÏãúÎèÑ Ï§ë..."

        # macOSÏóêÏÑú PostgreSQL ÏãúÏûë ÏãúÎèÑ
        if command -v brew &> /dev/null; then
            brew services start postgresql@14 2>/dev/null || brew services start postgresql 2>/dev/null || true
            sleep 3
            if pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
                log_success "PostgreSQL ÏãúÏûëÎê®"
                return 0
            fi
        fi

        log_error "PostgreSQLÏùÑ ÏãúÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî:"
        log_error "  brew services start postgresql"
        return 1
    fi
}

check_redis() {
    log_info "Redis ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."
    if redis-cli ping > /dev/null 2>&1; then
        log_success "Redis Ïã§Ìñâ Ï§ë"
        return 0
    else
        log_warning "RedisÍ∞Ä Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
        log_info "Redis ÏãúÏûë ÏãúÎèÑ Ï§ë..."

        # macOSÏóêÏÑú Redis ÏãúÏûë ÏãúÎèÑ
        if command -v brew &> /dev/null; then
            brew services start redis 2>/dev/null || true
            sleep 2
            if redis-cli ping > /dev/null 2>&1; then
                log_success "Redis ÏãúÏûëÎê®"
                return 0
            fi
        fi

        log_error "RedisÎ•º ÏãúÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÏàòÎèôÏúºÎ°ú ÏãúÏûëÌï¥Ï£ºÏÑ∏Ïöî:"
        log_error "  brew services start redis"
        return 1
    fi
}

# 3. Docker ÏÑúÎπÑÏä§ ÏãúÏûë Ìï®Ïàò
start_collabora_docker() {
    log_info "Collabora Online Docker ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."

    # Í∏∞Ï°¥ Collabora Ïª®ÌÖåÏù¥ÎÑà ÌôïÏù∏
    EXISTING_CONTAINER=$(docker ps -a --filter "name=collabora" --format "{{.Names}}" | head -1)

    if [[ -n "$EXISTING_CONTAINER" ]]; then
        CONTAINER_STATUS=$(docker inspect --format="{{.State.Status}}" "$EXISTING_CONTAINER")

        if [[ "$CONTAINER_STATUS" == "running" ]]; then
            log_success "Collabora Docker Ïù¥ÎØ∏ Ïã§Ìñâ Ï§ë: $EXISTING_CONTAINER"
            return 0
        else
            log_info "Í∏∞Ï°¥ Collabora Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë: $EXISTING_CONTAINER"
            docker start "$EXISTING_CONTAINER"
            sleep 5
            log_success "Collabora Docker ÏãúÏûëÎê®"
            return 0
        fi
    fi

    # ÏÉà Collabora Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ
    log_info "ÏÉà Collabora Online Ïª®ÌÖåÏù¥ÎÑà Ïã§Ìñâ Ï§ë..."
    docker run -d \
        --name collabora-unified \
        -p 9980:9980 \
        -e "aliasgroup1=http://host.docker.internal:3000" \
        -e "extra_params=--o:ssl.enable=false --o:ssl.termination=true" \
        -e "DONT_GEN_SSL_CERT=1" \
        --add-host host.docker.internal:host-gateway \
        collabora/code:23.05.4.2.1

    # Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë ÎåÄÍ∏∞
    log_info "Collabora ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë..."
    for i in {1..30}; do
        if curl -s "http://localhost:9980/hosting/discovery" > /dev/null 2>&1; then
            log_success "Collabora Online Ïã§ÌñâÎê® (Ìè¨Ìä∏ 9980)"
            return 0
        fi
        sleep 2
    done

    log_error "Collabora Online ÏãúÏûë Ïã§Ìå®"
    return 1
}

# 4. ÏÑúÎπÑÏä§Î≥Ñ ÏãúÏûë Ìï®ÏàòÎì§
start_rails() {
    log_info "Rails ÏÑúÎ≤Ñ ÏãúÏûë Ï§ë... (Ìè¨Ìä∏ 3000)"
    cd /Users/kevin/excel-unified/rails-app

    # ÌôòÍ≤Ω ÏÑ§Ï†ï
    export RAILS_ENV=development
    export PORT=3000

    # tmux ÏÑ∏ÏÖò ÏÉùÏÑ± Î∞è Rails ÏãúÏûë
    tmux new-session -d -s excel-unified -n rails
    tmux send-keys -t excel-unified:rails "cd /Users/kevin/excel-unified/rails-app && bin/dev" C-m

    # Rails ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞
    log_info "Rails ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë..."
    for i in {1..30}; do
        if curl -s "http://localhost:3000/up" > /dev/null 2>&1; then
            log_success "Rails ÏÑúÎ≤Ñ Ïã§ÌñâÎê® (Ìè¨Ìä∏ 3000)"
            return 0
        fi
        sleep 2
    done

    log_error "Rails ÏÑúÎ≤Ñ ÏãúÏûë Ïã§Ìå®"
    return 1
}

start_python() {
    log_info "Python ÏÑúÎπÑÏä§ ÏãúÏûë Ï§ë... (Ìè¨Ìä∏ 8000)"

    # Ìè¨Ìä∏ 8000Ïù¥ ÏÇ¨Ïö© Ï§ëÏù∏ÏßÄ ÌôïÏù∏
    if lsof -ti:8000 > /dev/null 2>&1; then
        log_warning "Ìè¨Ìä∏ 8000Ïù¥ Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏûÖÎãàÎã§. Í∏∞Ï°¥ ÌîÑÎ°úÏÑ∏Ïä§Î•º Ï¢ÖÎ£åÌï©ÎãàÎã§."
        kill -9 $(lsof -ti:8000) 2>/dev/null || true
        sleep 2
    fi

    # Python ÏÑúÎπÑÏä§Î•º Î≥ÑÎèÑ tmux ÏúàÎèÑÏö∞ÏóêÏÑú Ïã§Ìñâ
    tmux new-window -t excel-unified -n python
    tmux send-keys -t excel-unified:python "cd /Users/kevin/excel-unified/python-service && ./start_service.sh" C-m

    # Python ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞ (ÏãúÍ∞Ñ Ï¶ùÍ∞Ä Î∞è Îçî ÏûêÏÑ∏Ìïú Ï≤¥ÌÅ¨)
    log_info "Python ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë..."
    for i in {1..45}; do
        if curl -s "http://localhost:8000/health" > /dev/null 2>&1; then
            log_success "Python ÏÑúÎπÑÏä§ Ïã§ÌñâÎê® (Ìè¨Ìä∏ 8000)"
            # Ï∂îÍ∞Ä ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏
            if curl -s "http://localhost:8000/docs" > /dev/null 2>&1; then
                log_success "Python API Î¨∏ÏÑúÎèÑ Ï†ëÍ∑º Í∞ÄÎä•Ìï©ÎãàÎã§"
            fi
            return 0
        fi

        # ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
        if [[ $((i % 5)) -eq 0 ]]; then
            log_info "Python ÏÑúÎπÑÏä§ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë... (${i}/45)"
        fi
        sleep 2
    done

    log_error "Python ÏÑúÎπÑÏä§ ÏãúÏûë Ïã§Ìå®"
    log_error "tmux attach -t excel-unified:python ÏúºÎ°ú Î°úÍ∑∏Î•º ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî"
    return 1
}

start_sidekiq() {
    log_info "Sidekiq Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖ ÏãúÏûë Ï§ë..."

    # SidekiqÏùÑ Î≥ÑÎèÑ tmux ÏúàÎèÑÏö∞ÏóêÏÑú Ïã§Ìñâ
    tmux new-window -t excel-unified -n sidekiq
    tmux send-keys -t excel-unified:sidekiq "cd /Users/kevin/excel-unified/rails-app && bundle exec sidekiq" C-m

    sleep 3
    log_success "Sidekiq Ïã§ÌñâÎê®"
}

# 5. ÏÉÅÌÉú ÌôïÏù∏ Ìï®Ïàò
check_all_services() {
    log_info "Î™®Îì† ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."

    SERVICES_STATUS=""

    # Rails ÏÉÅÌÉú ÌôïÏù∏
    if curl -s "http://localhost:3000/up" > /dev/null 2>&1; then
        SERVICES_STATUS+="${GREEN}‚úÖ Rails (3000)${NC}\n"
    else
        SERVICES_STATUS+="${RED}‚ùå Rails (3000)${NC}\n"
    fi

    # Python ÏÉÅÌÉú ÌôïÏù∏
    if curl -s "http://localhost:8000/health" > /dev/null 2>&1; then
        SERVICES_STATUS+="${GREEN}‚úÖ Python (8000)${NC}\n"
    else
        SERVICES_STATUS+="${RED}‚ùå Python (8000)${NC}\n"
    fi

    # Collabora ÏÉÅÌÉú ÌôïÏù∏
    if curl -s "http://localhost:9980/hosting/discovery" > /dev/null 2>&1; then
        SERVICES_STATUS+="${GREEN}‚úÖ Collabora (9980)${NC}\n"
    else
        SERVICES_STATUS+="${RED}‚ùå Collabora (9980)${NC}\n"
    fi

    # PostgreSQL ÏÉÅÌÉú ÌôïÏù∏
    if pg_isready -h localhost -p 5432 > /dev/null 2>&1; then
        SERVICES_STATUS+="${GREEN}‚úÖ PostgreSQL (5432)${NC}\n"
    else
        SERVICES_STATUS+="${RED}‚ùå PostgreSQL (5432)${NC}\n"
    fi

    # Redis ÏÉÅÌÉú ÌôïÏù∏
    if redis-cli ping > /dev/null 2>&1; then
        SERVICES_STATUS+="${GREEN}‚úÖ Redis (6379)${NC}\n"
    else
        SERVICES_STATUS+="${RED}‚ùå Redis (6379)${NC}\n"
    fi

    echo -e "$SERVICES_STATUS"
}

# 6. Î©îÏù∏ Ïã§Ìñâ Î°úÏßÅ
main() {
    case "$ONLY_SERVICE" in
        "rails")
            check_postgresql || exit 1
            check_redis || exit 1
            start_rails || exit 1
            ;;
        "python")
            start_python || exit 1
            ;;
        "collabora")
            start_collabora_docker || exit 1
            ;;
        "docker")
            start_collabora_docker || exit 1
            ;;
        *)
            # Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú ÏãúÏûë
            log_header "ÌïÑÏàò ÏÑúÎπÑÏä§ ÌôïÏù∏"
            check_postgresql || exit 1
            check_redis || exit 1

            log_header "Docker ÏÑúÎπÑÏä§ ÏãúÏûë"
            start_collabora_docker || exit 1

            log_header "Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÑúÎπÑÏä§ ÏãúÏûë"
            start_rails || exit 1
            start_python || exit 1
            start_sidekiq || exit 1
            ;;
    esac

    # Ïã§Ìñâ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))

    echo ""
    log_header "üéâ Excel Unified ÏãúÏä§ÌÖú ÏãúÏûë ÏôÑÎ£å! (${DURATION}Ï¥à)"
    echo ""

    # ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌëúÏãú
    check_all_services

    echo ""
    log_info "ÏÑúÎπÑÏä§ URL:"
    echo -e "  ${CYAN}üìç Î©îÏù∏ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò: ${BOLD}http://localhost:3000${NC}"
    echo -e "  ${CYAN}üìç Python API: ${BOLD}http://localhost:8000${NC}"
    echo -e "  ${CYAN}üìç API Î¨∏ÏÑú: ${BOLD}http://localhost:8000/docs${NC}"
    echo -e "  ${CYAN}üìç Collabora Online: ${BOLD}http://localhost:9980${NC}"
    echo ""

    log_info "Ïú†Ïö©Ìïú Î™ÖÎ†πÏñ¥:"
    echo -e "  ${YELLOW}tmux attach -t excel-unified${NC}    # ÏÑúÎπÑÏä§ Î°úÍ∑∏ ÌôïÏù∏"
    echo -e "  ${YELLOW}./stop-all${NC}                     # Î™®Îì† ÏÑúÎπÑÏä§ Ï¢ÖÎ£å"
    echo -e "  ${YELLOW}docker logs -f collabora-unified${NC} # Collabora Î°úÍ∑∏ ÌôïÏù∏"
    echo ""

    # Î∏åÎùºÏö∞Ï†Ä ÏûêÎèô Ïã§Ìñâ
    if [[ "$OPEN_BROWSER" == true && -z "$ONLY_SERVICE" ]]; then
        log_info "Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ïó¥Í∏∞ Ï§ë..."
        if command -v open &> /dev/null; then
            # macOS
            open "http://localhost:3000"
        elif command -v xdg-open &> /dev/null; then
            # Linux
            xdg-open "http://localhost:3000"
        fi
    fi
}

# Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
main "$@"

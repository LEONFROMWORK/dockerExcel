name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Rails Tests
  rails-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: excel_unified_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true
        working-directory: ./rails-app
    
    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./rails-app/package-lock.json
    
    - name: Install dependencies
      working-directory: ./rails-app
      run: |
        bundle install --jobs 4 --retry 3
        npm ci
    
    - name: Setup test database
      working-directory: ./rails-app
      env:
        RAILS_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/excel_unified_test
      run: |
        bin/rails db:create
        bin/rails db:schema:load
    
    - name: Run Rails tests
      working-directory: ./rails-app
      env:
        RAILS_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/excel_unified_test
        REDIS_URL: redis://localhost:6379/0
      run: |
        bundle exec rspec
    
    - name: Run JavaScript tests
      working-directory: ./rails-app
      run: npm test
    
    - name: Run security checks
      working-directory: ./rails-app
      run: |
        bundle exec brakeman -q
        bundle exec bundler-audit check --update

  # Python Tests
  python-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: excel_unified_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-kor
    
    - name: Install Python dependencies
      working-directory: ./python-service
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run Python tests
      working-directory: ./python-service
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/excel_unified_test
        REDIS_URL: redis://localhost:6379/0
        ENVIRONMENT: test
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./python-service/coverage.xml
        flags: python

  # Lint
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
    
    - name: Ruby lint
      working-directory: ./rails-app
      run: |
        gem install rubocop
        rubocop
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Python lint
      working-directory: ./python-service
      run: |
        pip install flake8 black isort
        flake8 .
        black --check .
        isort --check-only .
    
    - name: JavaScript lint
      working-directory: ./rails-app
      run: |
        npm ci
        npm run lint

  # Build Docker images
  build:
    needs: [rails-test, python-test, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service: [rails, fastapi]
        include:
          - service: rails
            context: ./rails-app
            dockerfile: Dockerfile
          - service: fastapi
            context: ./python-service
            dockerfile: Dockerfile.production

    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max